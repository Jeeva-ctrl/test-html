@page "/json-accordion"
@using System.Text.Json.Nodes

<h3>JSON Accordion with Checkboxes</h3>

<div>@RenderJsonAccordion(JsonData, "")</div>

<h3>Selected JSON:</h3>
<pre>@FilteredJson</pre>

@code {
    JsonNode JsonData = JsonNode.Parse("""
    {
        "new": {
            "test": "test",
            "items": [
                { "name": "Item1", "value": null },
                { "name": "Item2", "value": "SomeValue" }
            ]
        }
    }
    """)!;

    Dictionary<string, bool> CheckboxMap = new();
    string FilteredJson = string.Empty;

    RenderFragment RenderJsonAccordion(JsonNode? node, string path) => builder =>
    {
        if (node is JsonObject obj)
        {
            foreach (var prop in obj)
            {
                var currentPath = path == "" ? prop.Key : $"{path}.{prop.Key}";
                var id = Guid.NewGuid().ToString();
                bool isChecked = !CheckboxMap.ContainsKey(currentPath) || CheckboxMap[currentPath];
                CheckboxMap[currentPath] = isChecked;

                builder.OpenElement(0, "details");
                builder.OpenElement(1, "summary");

                builder.OpenElement(2, "input");
                builder.AddAttribute(3, "type", "checkbox");
                builder.AddAttribute(4, "checked", isChecked);
                builder.AddAttribute(5, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
                {
                    bool isChecked = (bool)e.Value;
                    CheckboxMap[currentPath] = isChecked;

                    if (prop.Value is JsonObject || prop.Value is JsonArray)
                    {
                        UpdateChildrenCheckboxes(prop.Value, currentPath, isChecked);
                    }
                    UpdateFilteredJson();
                    StateHasChanged();
                }));
                builder.CloseElement();

                builder.AddContent(6, $" {prop.Key}");
                builder.CloseElement();

                builder.AddContent(7, RenderJsonAccordion(prop.Value, currentPath));
                builder.CloseElement();
            }
        }
        else if (node is JsonArray array)
        {
            for (int i = 0; i < array.Count; i++)
            {
                var currentPath = path == "" ? i.ToString() : $"{path}.{i}";
                var id = Guid.NewGuid().ToString();
                bool isChecked = !CheckboxMap.ContainsKey(currentPath) || CheckboxMap[currentPath];
                CheckboxMap[currentPath] = isChecked;

                builder.OpenElement(0, "details");
                builder.OpenE
