@page "/accordion"
@using System.Text.Json.Nodes
@inject IJSRuntime JS
@inject HttpClient Http

<h3>JSON Accordion</h3>
<button @onclick="FetchAndRender">Fetch Data and Render</button>

<div id="accordionContainer"></div>

@code {
    [Parameter] public JsonNode JsonData { get; set; } = JsonNode.Parse("{ \"new\": { \"test\": \"test\" } }")!;
    private Dictionary<string, bool> CheckboxMap = new();

    // Method to simulate fetching JSON from API
    private async Task FetchAndRender()
    {
        // Simulating fetching JSON from an API
        var response = await Http.GetFromJsonAsync<JsonNode>("your-api-endpoint");

        if (response is not null)
        {
            JsonData = response;
            await RenderAccordionAsync();
        }
    }

    // Render the Accordion dynamically
    private async Task RenderAccordionAsync()
    {
        var json = JsonData;
        var jsonString = json?.ToString();
        await JS.InvokeVoidAsync("renderAccordion", "accordionContainer", jsonString);
    }

    // Toggle the checkbox state and propagate the change
    private void ToggleCheckbox(ChangeEventArgs e, string path, JsonNode? node)
    {
        bool isChecked = (bool)e.Value!;
        CheckboxMap[path] = isChecked;

        // If it's an object or array, propagate the state to all children
        if (node is JsonObject obj)
        {
            foreach (var prop in obj)
            {
                var childPath = string.IsNullOrEmpty(path) ? prop.Key : $"{path}.{prop.Key}";
                ToggleCheckbox(new ChangeEventArgs { Value = isChecked }, childPath, prop.Value);
            }
        }
        else if (node is JsonArray arr)
        {
            for (int i = 0; i < arr.Count; i++)
            {
                var childPath = $"{path}[{i}]";
                ToggleCheckbox(new ChangeEventArgs { Value = isChecked }, childPath, arr[i]);
            }
        }
    }
}
<script>
    let checkboxStates = {};

    // Render Accordion with JSON data
    function renderAccordion(containerId, jsonData) {
        const container = document.getElementById(containerId);
        container.innerHTML = "";  // Clear any existing content
        checkboxStates[containerId] = {};

        const json = JSON.parse(jsonData);
        const rootKeys = Object.keys(json);

        rootKeys.forEach(key => {
            const el = renderNode(json[key], key, key, containerId);
            container.appendChild(el);
        });
    }

    // Render Node Function (handles both objects and arrays)
    function renderNode(jsonNode, path, key, containerId) {
        let details = document.createElement('details');
        details.setAttribute('id', `accordion_${path}`);
        
        let summary = document.createElement('summary');
        let checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.checked = checkboxStates[containerId]?.[path] ?? true;
        checkbox.onchange = function () {
            checkboxStates[containerId][path] = checkbox.checked;
            renderAccordion(containerId, window.originalJsonData);
        };

        // Add + / - icon for accordion open/close
        let icon = document.createElement('span');
        icon.innerText = checkbox.checked ? '-' : '+';
        summary.appendChild(icon);

        // Add the checkbox to the summary
        summary.appendChild(checkbox);
        summary.appendChild(document.createTextNode(key));
        details.appendChild(summary);

        // If it's an object or array, recurse
        if (jsonNode && typeof jsonNode === 'object') {
            const nodeKeys = Array.isArray(jsonNode) ? jsonNode : Object.keys(jsonNode);
            nodeKeys.forEach((childKey, idx) => {
                const childPath = `${path}.${childKey || idx}`;
                const childNode = jsonNode[childKey || idx];
                const childNodeElement = renderNode(childNode, childPath, childKey || idx, containerId);
                details.appendChild(childNodeElement);
            });
        } else {
            // Display the value of the leaf node (primitive value)
            let div = document.createElement('div');
            div.innerText = jsonNode;
            details.appendChild(div);
        }

        return details;
    }
</script>
