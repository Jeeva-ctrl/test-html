@page "/json-accordion"
@using System.Text.Json
@using System.Text.Json.Nodes

<h2>JSON Accordion with Checkboxes</h2>

@if (RootJson is JsonObject rootObj)
{
    foreach (var prop in rootObj)
    {
        @RenderNode(prop.Value, prop.Key, 0)
    }
}
else
{
    @RenderNode(RootJson, "", 0)
}

<h3>Selected JSON:</h3>
<pre>@FilteredJson</pre>

@code {
    private JsonNode? RootJson;
    private string FilteredJson = "";

    private Dictionary<string, bool> CheckboxMap = new();
    private Dictionary<string, List<string>> ChildPaths = new();

    protected override void OnInitialized()
    {
        // Sample JSON
        var json = """
        {
          "Alice": {
            "age": 30,
            "department": {
              "name": "Engineering",
              "manager": "John"
            },
            "education": [
              { "degree": "B.Tech", "university": "ABC University" },
              { "degree": "M.Tech", "university": "XYZ Institute" }
            ]
          },
          "Bob": {
            "age": 28,
            "department": {
              "name": "Marketing",
              "manager": "Sara"
            },
            "education": [
              { "degree": "BBA", "university": "LMN College" }
            ]
          }
        }
        """;

        RootJson = JsonNode.Parse(json);
        BuildCheckboxMap(RootJson, "");
        UpdateFilteredJson();
    }

    void BuildCheckboxMap(JsonNode? node, string path)
    {
        if (!CheckboxMap.ContainsKey(path))
            CheckboxMap[path] = true;

        if (!ChildPaths.ContainsKey(path))
            ChildPaths[path] = new List<string>();

        if (node is JsonObject obj)
        {
            foreach (var prop in obj)
            {
                var newPath = path == "" ? prop.Key : $"{path}.{prop.Key}";
                ChildPaths[path].Add(newPath);
                BuildCheckboxMap(prop.Value, newPath);
            }
        }
        else if (node is JsonArray arr)
        {
            for (int i = 0; i < arr.Count; i++)
            {
                var newPath = path == "" ? $"{i}" : $"{path}.{i}";
                ChildPaths[path].Add(newPath);
                BuildCheckboxMap(arr[i], newPath);
            }
        }
    }

    void SetCheckboxRecursively(string path, bool value)
    {
        CheckboxMap[path] = value;

        if (ChildPaths.TryGetValue(path, out var children))
        {
            foreach (var childPath in children)
            {
                SetCheckboxRecursively(childPath, value);
            }
        }
    }

    RenderFragment RenderNode(JsonNode? node, string path, int level) => builder =>
    {
        int seq = 0;

        string label = path.Split('.').Last();

        if (node is JsonObject obj)
        {
            builder.OpenElement(seq++, "details");
            builder.AddAttribute(seq++, "style", $"margin-left: {level * 20}px");
            builder.OpenElement(seq++, "summary");

            builder.OpenElement(seq++, "input");
            builder.AddAttribute(seq++, "type", "checkbox");
            builder.AddAttribute(seq++, "checked", CheckboxMap[path]);
            builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
            {
                var isChecked = (bool)e.Value;
                SetCheckboxRecursively(path, isChecked);
                UpdateFilteredJson();
            }));
            builder.CloseElement(); // input

            builder.AddContent(seq++, $" {label}");

            builder.CloseElement(); // summary

            foreach (var prop in obj)
            {
                builder.AddContent(seq++, RenderNode(prop.Value, $"{path}.{prop.Key}", level + 1));
            }

            builder.CloseElement(); // details
        }
        else if (node is JsonArray arr)
        {
            builder.OpenElement(seq++, "details");
            builder.AddAttribute(seq++, "style", $"margin-left: {level * 20}px");
            builder.OpenElement(seq++, "summary");

            builder.OpenElement(seq++, "input");
            builder.AddAttribute(seq++, "type", "checkbox");
            builder.AddAttribute(seq++, "checked", CheckboxMap[path]);
            builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
            {
                var isChecked = (bool)e.Value;
                SetCheckboxRecursively(path, isChecked);
                UpdateFilteredJson();
            }));
            builder.CloseElement(); // input

            builder.AddContent(seq++, $" {label} (Array)");

            builder.CloseElement(); // summary

            for (int i = 0; i < arr.Count; i++)
            {
                builder.AddContent(seq++, RenderNode(arr[i], $"{path}.{i}", level + 1));
            }

            builder.CloseElement(); // details
        }
        else
        {
            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "style", $"margin-left: {level * 20}px");

            builder.OpenElement(seq++, "input");
            builder.AddAttribute(seq++, "type", "checkbox");
            builder.AddAttribute(seq++, "checked", CheckboxMap[path]);
            builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
            {
                CheckboxMap[path] = (bool)e.Value;
                UpdateFilteredJson();
            }));
            builder.CloseElement(); // input

            builder.AddContent(seq++, $" {label}: {node?.ToJsonString()}");

            builder.CloseElement(); // div
        }
    };

    void UpdateFilteredJson()
    {
        var filtered = FilterJson(RootJson, "");
        FilteredJson = JsonSerializer.Serialize(filtered, new JsonSerializerOptions { WriteIndented = true });
    }

    JsonNode? FilterJson(JsonNode? node, string path)
    {
        if (!CheckboxMap.GetValueOrDefault(path, true)) return null;

        if (node is JsonObject obj)
        {
            var filteredObj = new JsonObject();
            foreach (var prop in obj)
            {
                var newPath = path == "" ? prop.Key : $"{path}.{prop.Key}";
                var filtered = FilterJson(prop.Value, newPath);
                if (filtered != null)
                    filteredObj[prop.Key] = filtered.DeepClone();
            }
            return filteredObj.Count > 0 ? filteredObj : null;
        }
        else if (node is JsonArray arr)
        {
            var filteredArr = new JsonArray();
            for (int i = 0; i < arr.Count; i++)
            {
                var newPath = path == "" ? $"{i}" : $"{path}.{i}";
                var filtered = FilterJson(arr[i], newPath);
                if (filtered != null)
                    filteredArr.Add(filtered.DeepClone());
            }
            return filteredArr.Count > 0 ? filteredArr : null;
        }
        else
        {
            return node?.DeepClone();
        }
    }
}
