@page "/jsonaccordion"
@using System.Text.Json
@using System.Text.Json.Nodes

<h3>JSON Accordion with Checkboxes</h3>

<div>
    @if (RootJson != null)
    {
        @RenderJson(RootJson, "")
        <h4>Selected JSON:</h4>
        <pre>@FilteredJson</pre>
    }
    else
    {
        <p>Loading...</p>
    }
</div>

@code {
    private JsonNode? RootJson;
    private Dictionary<string, bool> CheckboxMap = new();
    private string FilteredJson = "";

    private string SampleJson = """
    [
      {
        "name": "Alice",
        "age": 30,
        "department": {
          "name": "Engineering",
          "manager": "John"
        },
        "education": [
          { "degree": "B.Tech", "university": "ABC University" },
          { "degree": "M.Tech", "university": "XYZ Institute" }
        ]
      },
      {
        "name": "Bob",
        "age": 28,
        "department": {
          "name": "Marketing",
          "manager": "Sara"
        },
        "education": [
          { "degree": "BBA", "university": "LMN College" }
        ]
      }
    ]
    """;

    protected override void OnInitialized()
    {
        RootJson = JsonNode.Parse(SampleJson);
        InitializeCheckboxes(RootJson, "");
        UpdateFilteredJson();
    }

    void InitializeCheckboxes(JsonNode? node, string path)
    {
        if (node is JsonObject obj)
        {
            CheckboxMap[path] = true;
            foreach (var prop in obj)
            {
                var newPath = path == "" ? prop.Key : $"{path}.{prop.Key}";
                InitializeCheckboxes(prop.Value, newPath);
            }
        }
        else if (node is JsonArray arr)
        {
            CheckboxMap[path] = true;
            for (int i = 0; i < arr.Count; i++)
            {
                var newPath = path == "" ? $"{i}" : $"{path}.{i}";
                InitializeCheckboxes(arr[i], newPath);
            }
        }
        else
        {
            CheckboxMap[path] = true;
        }
    }

    RenderFragment RenderJson(JsonNode? node, string path) => builder =>
    {
        if (node is JsonObject obj)
        {
            int seq = 0;
            builder.OpenElement(seq++, "details");
            builder.OpenElement(seq++, "summary");
            builder.OpenElement(seq++, "input");
            builder.AddAttribute(seq++, "type", "checkbox");
            builder.AddAttribute(seq++, "checked", CheckboxMap[path]);
            builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
            {
                CheckboxMap[path] = (bool)(e.Value ?? false);
                UpdateFilteredJson();
                StateHasChanged();
            }));
            builder.CloseElement();
            builder.AddContent(seq++, $" {path.Split('.').LastOrDefault() ?? "Root"}");
            builder.CloseElement(); // summary

            foreach (var prop in obj)
            {
                var newPath = path == "" ? prop.Key : $"{path}.{prop.Key}";
                builder.AddContent(seq++, RenderJson(prop.Value, newPath));
            }
            builder.CloseElement(); // details
        }
        else if (node is JsonArray arr)
        {
            int seq = 0;
            builder.OpenElement(seq++, "details");
            builder.OpenElement(seq++, "summary");
            builder.OpenElement(seq++, "input");
            builder.AddAttribute(seq++, "type", "checkbox");
            builder.AddAttribute(seq++, "checked", CheckboxMap[path]);
            builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
            {
                CheckboxMap[path] = (bool)(e.Value ?? false);
                UpdateFilteredJson();
                StateHasChanged();
            }));
            builder.CloseElement();
            builder.AddContent(seq++, $" {path.Split('.').LastOrDefault() ?? "Array"}");
            builder.CloseElement(); // summary

            for (int i = 0; i < arr.Count; i++)
            {
                var newPath = path == "" ? $"{i}" : $"{path}.{i}";
                builder.AddContent(seq++, RenderJson(arr[i], newPath));
            }

            builder.CloseElement(); // details
        }
        else
        {
            int seq = 0;
            builder.OpenElement(seq++, "div");

            builder.OpenElement(seq++, "input");
            builder.AddAttribute(seq++, "type", "checkbox");
            builder.AddAttribute(seq++, "checked", CheckboxMap[path]);
            builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
            {
                CheckboxMap[path] = (bool)(e.Value ?? false);
                UpdateFilteredJson();
                StateHasChanged();
            }));
            builder.CloseElement();

            builder.AddContent(seq++, $" {path.Split('.').LastOrDefault() ?? "Value"}: ");
            builder.OpenElement(seq++, "span");
            builder.AddAttribute(seq++, "style", "background-color: #eee; padding: 2px 4px; border-radius: 4px;");
            builder.AddContent(seq++, node?.ToString());
            builder.CloseElement();

            builder.CloseElement(); // div
        }
    };

    JsonNode? FilterJson(JsonNode? node, string path)
    {
        if (!CheckboxMap.GetValueOrDefault(path, true)) return null;

        if (node is JsonObject obj)
        {
            var filteredObj = new JsonObject();
            foreach (var prop in obj)
            {
                var newPath = path == "" ? prop.Key : $"{path}.{prop.Key}";
                var filtered = FilterJson(prop.Value, newPath);
                if (filtered != null)
                    filteredObj[prop.Key] = filtered;
            }
            return filteredObj.Count > 0 ? filteredObj : null;
        }
        else if (node is JsonArray arr)
        {
            var filteredArr = new JsonArray();
            for (int i = 0; i < arr.Count; i++)
            {
                var newPath = path == "" ? $"{i}" : $"{path}.{i}";
                var filtered = FilterJson(arr[i], newPath);
                if (filtered != null)
                    filteredArr.Add(filtered);
            }
            return filteredArr.Count > 0 ? filteredArr : null;
        }
        else
        {
            return node;
        }
    }

    void UpdateFilteredJson()
    {
        var filtered = FilterJson(RootJson, "");
        FilteredJson = JsonSerializer.Serialize(filtered, new JsonSerializerOptions { WriteIndented = true });
    }
}
