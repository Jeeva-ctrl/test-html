@using System.Text.Json
@using System.Text.Json.Nodes

<div>
    <h3>JSON Accordion</h3>
    @RenderNode(JsonData, "")

    <h4>Selected JSON:</h4>
    <pre>@FilteredJson?.ToJsonString(new JsonSerializerOptions { WriteIndented = true })</pre>
</div>

@code {
    [Parameter] public JsonNode JsonData { get; set; } = JsonNode.Parse("{\"new\":{\"test\":\"test\"}}")!;
    private Dictionary<string, bool> CheckboxMap = new();
    private JsonNode? FilteredJson;

    protected override void OnInitialized()
    {
        InitializeCheckboxes(JsonData, "");
        FilteredJson = FilterJson(JsonData, "");
    }

    private void InitializeCheckboxes(JsonNode? node, string path)
    {
        CheckboxMap[path] = true;

        if (node is JsonObject obj)
        {
            foreach (var prop in obj)
                InitializeCheckboxes(prop.Value, string.IsNullOrEmpty(path) ? prop.Key : $"{path}.{prop.Key}");
        }
        else if (node is JsonArray arr)
        {
            for (int i = 0; i < arr.Count; i++)
                InitializeCheckboxes(arr[i], $"{path}[{i}]");
        }
    }

    private void ToggleCheckbox(ChangeEventArgs e, string path, JsonNode? node)
    {
        bool isChecked = (bool)e.Value!;
        CheckboxMap[path] = isChecked;
        CascadeUpdateCheckboxes(node, path, isChecked);
        FilteredJson = FilterJson(JsonData, "");
    }

    private void CascadeUpdateCheckboxes(JsonNode? node, string path, bool state)
    {
        if (node is JsonObject obj)
        {
            foreach (var prop in obj)
            {
                var childPath = string.IsNullOrEmpty(path) ? prop.Key : $"{path}.{prop.Key}";
                CheckboxMap[childPath] = state;
                CascadeUpdateCheckboxes(prop.Value, childPath, state);
            }
        }
        else if (node is JsonArray arr)
        {
            for (int i = 0; i < arr.Count; i++)
            {
                var childPath = $"{path}[{i}]";
                CheckboxMap[childPath] = state;
                CascadeUpdateCheckboxes(arr[i], childPath, state);
            }
        }
    }

    private JsonNode? FilterJson(JsonNode? node, string path)
    {
        if (!CheckboxMap.GetValueOrDefault(path, true)) return null;

        if (node is JsonObject obj)
        {
            var result = new JsonObject();
            foreach (var prop in obj)
            {
                var childPath = string.IsNullOrEmpty(path) ? prop.Key : $"{path}.{prop.Key}";
                var filtered = FilterJson(prop.Value, childPath);
                if (filtered != null || prop.Value is null)
                    result[prop.Key] = filtered ?? null;
            }
            return result;
        }
        else if (node is JsonArray arr)
        {
            var result = new JsonArray();
            for (int i = 0; i < arr.Count; i++)
            {
                var childPath = $"{path}[{i}]";
                var filtered = FilterJson(arr[i], childPath);
                result.Add(filtered ?? null);
            }
            return result;
        }

        return node;
    }

    RenderFragment RenderNode(JsonNode? node, string path) => builder =>
    {
        int seq = 0;
        string label = string.IsNullOrEmpty(path) ? "Root" : path.Split('.').Last().Split('[').First();

        if (node is JsonObject obj)
        {
            builder.OpenElement(seq++, "details");
            builder.AddAttribute(seq++, "open", true);
            builder.SetKey(path);

            builder.OpenElement(seq++, "summary");

            builder.OpenElement(seq++, "input");
            builder.AddAttribute(seq++, "type", "checkbox");
            builder.AddAttribute(seq++, "checked", CheckboxMap.GetValueOrDefault(path, true));
            builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => ToggleCheckbox(e, path, node)));
            builder.CloseElement();

            builder.AddContent(seq++, $" {label}");
            builder.CloseElement(); // summary

            foreach (var prop in obj)
            {
                var childPath = string.IsNullOrEmpty(path) ? prop.Key : $"{path}.{prop.Key}";
                builder.AddContent(seq++, RenderNode(prop.Value, childPath));
            }

            builder.CloseElement(); // details
        }
        else if (node is JsonArray arr)
        {
            builder.OpenElement(seq++, "details");
            builder.AddAttribute(seq++, "open", true);
            builder.SetKey(path);

            builder.OpenElement(seq++, "summary");

            builder.OpenElement(seq++, "input");
            builder.AddAttribute(seq++, "type", "checkbox");
            builder.AddAttribute(seq++, "checked", CheckboxMap.GetValueOrDefault(path, true));
            builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => ToggleCheckbox(e, path, node)));
            builder.CloseElement();

            builder.AddContent(seq++, $" {label} [Array]");
            builder.CloseElement();

            for (int i = 0; i < arr.Count; i++)
            {
                var childPath = $"{path}[{i}]";
                builder.AddContent(seq++, RenderNode(arr[i], childPath));
            }

            builder.CloseElement();
        }
        else
        {
            builder.OpenElement(seq++, "div");
            builder.SetKey(path);

            builder.OpenElement(seq++, "input");
            builder.AddAttribute(seq++, "type", "checkbox");
            builder.AddAttribute(seq++, "checked", CheckboxMap.GetValueOrDefault(path, true));
            builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => ToggleCheckbox(e, path, node)));
            builder.CloseElement();

            builder.AddContent(seq++, $" {label}: {node?.ToString()}");
            builder.CloseElement();
        }
    };
}
