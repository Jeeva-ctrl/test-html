@inject IJSRuntime JS
@code {
    private JsonNode? JsonData;
    private string FilteredJson = "";

    private async Task FetchAndRenderJson()
    {
        // Simulate API call
        var responseJson = "{ \"new\": { \"test\": \"test\" } }"; // Replace with real API response
        JsonData = JsonNode.Parse(responseJson);
        await JS.InvokeVoidAsync("renderAccordionFromJson", "accordionContainer", JsonData.ToJsonString());
    }

    private async Task GetFilteredJson()
    {
        FilteredJson = await JS.InvokeAsync<string>("getFilteredJson");
    }
}

<h3>Dynamic JSON Accordion</h3>

<button @onclick="FetchAndRenderJson">Fetch & Render JSON</button>
<button @onclick="GetFilteredJson">Get Filtered JSON</button>

<div id="accordionContainer"></div>

<h4>Filtered JSON:</h4>
<pre>@FilteredJson</pre>

@section Scripts {
    <script>
        let checkboxMap = {};

        function renderAccordionFromJson(containerId, jsonStr) {
            checkboxMap = {};
            const container = document.getElementById(containerId);
            container.innerHTML = '';
            const json = JSON.parse(jsonStr);

            function createAccordion(node, path) {
                const wrapper = document.createElement('div');

                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.checked = true;
                checkboxMap[path] = true;

                checkbox.onchange = () => {
                    checkboxMap[path] = checkbox.checked;
                    // Recurse for child checkboxes
                    wrapper.querySelectorAll('input[type=checkbox]').forEach((cb, i) => {
                        if (i !== 0) cb.checked = checkbox.checked;
                        const childPath = cb.dataset.path;
                        if (childPath) checkboxMap[childPath] = cb.checked;
                    });
                };

                checkbox.dataset.path = path;
                wrapper.appendChild(checkbox);

                const label = document.createElement('span');
                label.textContent = ` ${path.split('.').pop() || 'Root'}`;
                wrapper.appendChild(label);

                if (typeof node === 'object' && node !== null) {
                    const details = document.createElement('details');
                    details.open = true;
                    const summary = document.createElement('summary');
                    summary.appendChild(wrapper);
                    details.appendChild(summary);

                    if (Array.isArray(node)) {
                        node.forEach((item, idx) => {
                            const child = createAccordion(item, `${path}[${idx}]`);
                            details.appendChild(child);
                        });
                    } else {
                        for (const key in node) {
                            const child = createAccordion(node[key], path ? `${path}.${key}` : key);
                            details.appendChild(child);
                        }
                    }
                    return details;
                } else {
                    return wrapper;
                }
            }

            const accordion = createAccordion(json, '');
            container.appendChild(accordion);
        }

        function getFilteredJson() {
            function deepFilter(obj, path = '') {
                if (typeof obj !== 'object' || obj === null) {
                    return checkboxMap[path] ? obj : undefined;
                }

                if (Array.isArray(obj)) {
                    const result = obj.map((item, i) => deepFilter(item, `${path}[${i}]`))
                        .filter(v => v !== undefined);
                    return result.length > 0 ? result : undefined;
                } else {
                    const result = {};
                    for (const key in obj) {
                        const childPath = path ? `${path}.${key}` : key;
                        const filtered = deepFilter(obj[key], childPath);
                        if (filtered !== undefined || obj[key] === null) {
                            result[key] = filtered ?? null;
                        }
                    }
                    return Object.keys(result).length > 0 ? result : undefined;
                }
            }

            const raw = JSON.parse(document.querySelector('#accordionContainer').dataset.rawjson || '{}');
            const filtered = deepFilter(raw);
            return JSON.stringify(filtered, null, 2);
        }
    </script>
}
