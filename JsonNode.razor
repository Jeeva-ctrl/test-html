@page "/json-accordion"
@inject IJSRuntime JS

<h3>JSON Accordion</h3>

<div id="accordion-container"></div>

<button @onclick="GetSelectedJson">Get Selected JSON</button>

<h4>Filtered JSON</h4>
<pre>@FilteredJson</pre>

@code {
    private string FilteredJson;

    private string jsonInput = """
    {
        "menu": {
            "id": "file",
            "value": "File",
            "popup": {
                "menuitem": [
                    {"value": "New", "onclick": "CreateNewDoc()"},
                    {"value": "Open", "onclick": "OpenDoc()"},
                    {"value": "Close", "onclick": "CloseDoc()"}
                ]
            }
        }
    }
    """;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("renderAccordionFromJson", jsonInput);
        }
    }

    private async Task GetSelectedJson()
    {
        FilteredJson = await JS.InvokeAsync<string>("getSelectedJson");
    }
}
window.checkboxMap = {};
window.jsonData = null;

// Renders the accordion UI based on JSON data
window.renderAccordionFromJson = (jsonString) => {
    const container = document.getElementById('accordion-container');
    container.innerHTML = '';  // Clear existing content
    window.jsonData = JSON.parse(jsonString);
    processNode(window.jsonData, "", container);
};

// Recursively process each node
window.processNode = (node, path, container) => {
    if (Array.isArray(node)) {
        node.forEach((item, index) => {
            const childPath = `${path}[${index}]`;
            createAccordionElement(item, childPath, container);
            processNode(item, childPath, container);
        });
    } else if (typeof node === "object" && node !== null) {
        for (const key in node) {
            const childPath = path ? `${path}.${key}` : key;
            createAccordionElement(node[key], childPath, container);
            processNode(node[key], childPath, container);
        }
    }
};

// Create accordion entry
window.createAccordionElement = (node, path, container) => {
    const wrapper = document.createElement('details');
    wrapper.setAttribute('data-path', path);

    const summary = document.createElement('summary');
    summary.textContent = path.split('.').pop(); // Label

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.checked = true;
    checkbox.setAttribute('data-path', path);
    checkbox.addEventListener('change', (e) => handleCheckboxChange(e, path));

    summary.insertBefore(checkbox, summary.firstChild);
    wrapper.appendChild(summary);
    container.appendChild(wrapper);
};

// On checkbox change
window.handleCheckboxChange = (event, path) => {
    const isChecked = event.target.checked;
    window.checkboxMap[path] = isChecked;

    if (!isChecked) {
        updateChildrenCheckboxState(path, false);
    }
};

// Recursively update children checkboxes
window.updateChildrenCheckboxState = (path, checked) => {
    const elements = document.querySelectorAll(`[data-path^="${path}."]`);
    elements.forEach((elem) => {
        const checkbox = elem.querySelector('input[type="checkbox"]');
        if (checkbox) {
            checkbox.checked = checked;
            const childPath = checkbox.getAttribute('data-path');
            window.checkboxMap[childPath] = checked;
            updateChildrenCheckboxState(childPath, checked);
        }
    });
};

// Return filtered JSON string
window.getSelectedJson = () => {
    return JSON.stringify(filterJson(window.checkboxMap, window.jsonData), null, 2);
};

// Filter the JSON tree recursively
window.filterJson = (checkboxMap, data, path = "") => {
    if (Array.isArray(data)) {
        return data
            .map((item, index) => filterJson(checkboxMap, item, `${path}[${index}]`))
            .filter((item) => item !== null);
    } else if (typeof data === "object" && data !== null) {
        const result = {};
        for (const key in data) {
            const childPath = path ? `${path}.${key}` : key;
            if (checkboxMap[childPath]) {
                result[key] = filterJson(checkboxMap, data[key], childPath);
            }
        }
        return Object.keys(result).length > 0 ? result : null;
    }
    return checkboxMap[path] ? data : null;
};
