@using System.Text.Json.Nodes

@code {
    [Parameter] public JsonNode JsonData { get; set; } = JsonNode.Parse("{ \"new\": { \"test\": \"test\" } }")!;

    private Dictionary<string, bool> CheckboxMap = new();

    protected override void OnInitialized()
    {
        InitializeCheckboxes(JsonData, "");
    }

    private void InitializeCheckboxes(JsonNode? node, string path)
    {
        if (node is JsonObject obj)
        {
            CheckboxMap[path] = true;
            foreach (var prop in obj)
            {
                var childPath = string.IsNullOrEmpty(path) ? prop.Key : $"{path}.{prop.Key}";
                InitializeCheckboxes(prop.Value, childPath);
            }
        }
        else if (node is JsonArray arr)
        {
            CheckboxMap[path] = true;
            for (int i = 0; i < arr.Count; i++)
            {
                var childPath = $"{path}[{i}]";
                InitializeCheckboxes(arr[i], childPath);
            }
        }
        else
        {
            CheckboxMap[path] = true;
        }
    }

    private void ToggleCheckbox(ChangeEventArgs e, string path, JsonNode? node)
    {
        bool isChecked = (bool)e.Value!;
        CheckboxMap[path] = isChecked;

        if (node is JsonObject obj)
        {
            foreach (var prop in obj)
            {
                var childPath = string.IsNullOrEmpty(path) ? prop.Key : $"{path}.{prop.Key}";
                ToggleCheckbox(new ChangeEventArgs { Value = isChecked }, childPath, prop.Value);
            }
        }
        else if (node is JsonArray arr)
        {
            for (int i = 0; i < arr.Count; i++)
            {
                var childPath = $"{path}[{i}]";
                ToggleCheckbox(new ChangeEventArgs { Value = isChecked }, childPath, arr[i]);
            }
        }
    }

    private JsonNode? FilterJson(JsonNode? node, string path)
    {
        if (node is JsonObject obj)
        {
            if (!CheckboxMap.GetValueOrDefault(path, true)) return null;

            var result = new JsonObject();
            foreach (var prop in obj)
            {
                var childPath = string.IsNullOrEmpty(path) ? prop.Key : $"{path}.{prop.Key}";
                var filtered = FilterJson(prop.Value, childPath);
                if (filtered != null || prop.Value == null)
                {
                    result[prop.Key] = filtered ?? null;
                }
            }
            return result.Count > 0 ? result : null;
        }
        else if (node is JsonArray arr)
        {
            if (!CheckboxMap.GetValueOrDefault(path, true)) return null;

            var result = new JsonArray();
            for (int i = 0; i < arr.Count; i++)
            {
                var childPath = $"{path}[{i}]";
                var filtered = FilterJson(arr[i], childPath);
                if (filtered != null || arr[i] == null)
                {
                    result.Add(filtered ?? null);
                }
            }
            return result.Count > 0 ? result : null;
        }
        else
        {
            return CheckboxMap.GetValueOrDefault(path, true) ? node : null;
        }
    }
}

<div>
    <h3>JSON Accordion</h3>
    @RenderNode(JsonData, "")

    <h4>Selected JSON:</h4>
    <pre>@FilterJson(JsonData, "")?.ToJsonString(new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</pre>
</div>

@functions {
    RenderFragment RenderNode(JsonNode? node, string path) => builder =>
    {
        int seq = 0;

        if (node is JsonObject obj)
        {
            builder.OpenElement(seq++, "details");
            builder.AddAttribute(seq++, "open", true);
            builder.AddAttribute(seq++, "@key", path);

            builder.OpenElement(seq++, "summary");
            builder.OpenElement(seq++, "input");
            builder.AddAttribute(seq++, "type", "checkbox");
            builder.AddAttribute(seq++, "checked", CheckboxMap.GetValueOrDefault(path, true));
            builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => ToggleCheckbox(e, path, node)));
            builder.CloseElement();
            builder.AddContent(seq++, string.IsNullOrEmpty(path) ? "Root" : path.Split('.').Last());
            builder.CloseElement();

            foreach (var prop in obj)
            {
                var childPath = string.IsNullOrEmpty(path) ? prop.Key : $"{path}.{prop.Key}";
                builder.AddContent(seq++, RenderNode(prop.Value, childPath));
            }

            builder.CloseElement();
        }
        else if (node is JsonArray arr)
        {
            builder.OpenElement(seq++, "details");
            builder.AddAttribute(seq++, "open", true);
            builder.AddAttribute(seq++, "@key", path);

            builder.OpenElement(seq++, "summary");
            builder.OpenElement(seq++, "input");
            builder.AddAttribute(seq++, "type", "checkbox");
            builder.AddAttribute(seq++, "checked", CheckboxMap.GetValueOrDefault(path, true));
            builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => ToggleCheckbox(e, path, node)));
            builder.CloseElement();
            builder.AddContent(seq++, path.Split('.').Last());
            builder.CloseElement();

            for (int i = 0; i < arr.Count; i++)
            {
                var childPath = $"{path}[{i}]";
                builder.AddContent(seq++, RenderNode(arr[i], childPath));
            }

            builder.CloseElement();
        }
        else
        {
            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "@key", path);

            builder.OpenElement(seq++, "input");
            builder.AddAttribute(seq++, "type", "checkbox");
            builder.AddAttribute(seq++, "checked", CheckboxMap.GetValueOrDefault(path, true));
            builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => ToggleCheckbox(e, path, node)));
            builder.CloseElement();

            builder.AddContent(seq++, $" {path.Split('.').Last()}: {node?.ToString()} ");

            builder.CloseElement();
        }
    };
}
