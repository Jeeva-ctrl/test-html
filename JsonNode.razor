@page "/json-accordion"
@inject IJSRuntime JSRuntime

<h3>JSON Accordion with Checkboxes</h3>

<div id="jsonAccordion"></div>
<button class="btn btn-primary mt-3" @onclick="GetSelectedJson">Get Selected JSON</button>

<pre class="mt-3 bg-light p-2" id="selectedJsonPreview"></pre>

@code {
    private string JsonData = """
    {
      "employees": [
        {
          "name": "Alice",
          "age": 30,
          "education": {
            "degree": "MBA",
            "university": "Stanford"
          },
          "department": "HR"
        },
        {
          "name": "Bob",
          "age": 28,
          "education": {
            "degree": "B.Tech",
            "university": "MIT"
          },
          "department": "Engineering"
        }
      ],
      "company": {
        "name": "TechCorp",
        "location": "New York"
      }
    }
    """;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeAccordion", JsonData);
        }
    }

    private async Task GetSelectedJson()
    {
        var selectedJson = await JSRuntime.InvokeAsync<string>("getSelectedJson");
        await JSRuntime.InvokeVoidAsync("showJsonPreview", selectedJson);
    }
}
window.initializeAccordion = (jsonData) => {
    // Initialize the accordion with checkboxes
    buildAccordion(jsonData, "jsonAccordion");
};

window.buildAccordion = (node, containerId) => {
    const container = document.getElementById(containerId);
    container.innerHTML = ""; // Clear the container

    function createAccordion(node, parentPath) {
        if (typeof node === "object" && !Array.isArray(node)) {
            // Create a JSON Object accordion
            const details = document.createElement("details");
            const summary = document.createElement("summary");
            const checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.checked = true;
            checkbox.onclick = (e) => toggleCheckbox(e, parentPath, node);
            summary.appendChild(checkbox);
            summary.appendChild(document.createTextNode(parentPath || "Root"));

            details.appendChild(summary);
            container.appendChild(details);

            for (let key in node) {
                createAccordion(node[key], parentPath ? `${parentPath}.${key}` : key);
            }
        } else if (Array.isArray(node)) {
            // Create a JSON Array accordion
            const details = document.createElement("details");
            const summary = document.createElement("summary");
            const checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.checked = true;
            checkbox.onclick = (e) => toggleCheckbox(e, parentPath, node);
            summary.appendChild(checkbox);
            summary.appendChild(document.createTextNode(parentPath || "Array"));

            details.appendChild(summary);
            container.appendChild(details);

            for (let i = 0; i < node.length; i++) {
                createAccordion(node[i], `${parentPath}[${i}]`);
            }
        } else {
            // Handle primitive values (string, number, etc.)
            const div = document.createElement("div");
            const checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.checked = true;
            checkbox.onclick = (e) => toggleCheckbox(e, parentPath, node);

            div.appendChild(checkbox);
            div.appendChild(document.createTextNode(`${parentPath}: ${node}`));
            container.appendChild(div);
        }
    }

    createAccordion(node, "");
};

window.toggleCheckbox = (event, path, node) => {
    const isChecked = event.target.checked;
    // Save checkbox state
    setCheckboxState(path, isChecked);

    if (typeof node === "object" && !Array.isArray(node)) {
        // Recursively uncheck or check child elements
        for (let key in node) {
            const childPath = `${path}.${key}`;
            const childNode = node[key];
            const childCheckbox = document.querySelector(`[data-path="${childPath}"]`);
            if (childCheckbox) {
                childCheckbox.checked = isChecked;
            }
        }
    } else if (Array.isArray(node)) {
        // Recursively uncheck or check child elements for arrays
        for (let i = 0; i < node.length; i++) {
            const childPath = `${path}[${i}]`;
            const childNode = node[i];
            const childCheckbox = document.querySelector(`[data-path="${childPath}"]`);
            if (childCheckbox) {
                childCheckbox.checked = isChecked;
            }
        }
    }
};

// Store checkbox state in local storage or memory
let checkboxMap = {};

window.setCheckboxState = (path, isChecked) => {
    checkboxMap[path] = isChecked;
};

window.getSelectedJson = () => {
    return filterJson(window.jsonData, checkboxMap);
};

window.filterJson = (node, checkboxMap) => {
    if (typeof node === "object" && !Array.isArray(node)) {
        const result = {};
        for (let key in node) {
            const path = key;
            if (checkboxMap[path] !== false) {
                result[key] = filterJson(node[key], checkboxMap);
            }
        }
        return result;
    } else if (Array.isArray(node)) {
        const result = [];
        for (let i = 0; i < node.length; i++) {
            const path = `[${i}]`;
            if (checkboxMap[path] !== false) {
                result.push(filterJson(node[i], checkboxMap));
            }
        }
        return result;
    } else {
        return checkboxMap ? node : null;
    }
};
