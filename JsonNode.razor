<script>
    let checkboxMap = {};

    window.initializeAccordionHandler = () => {
        // This just sets up helper
        window.renderAccordionFromJson = (jsonString) => {
            const json = JSON.parse(jsonString);
            checkboxMap = {};

            const container = document.getElementById('accordion-container');
            container.innerHTML = '';
            container.dataset.originalJson = JSON.stringify(json);

            Object.entries(json).forEach(([key, value]) => {
                const node = createAccordion(key, value, key);
                container.appendChild(node);
            });
        };
    };

    function createAccordion(key, value, path) {
        const wrapper = document.createElement('details');
        wrapper.open = true;

        const summary = document.createElement('summary');

        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.checked = true;
        checkbox.dataset.path = path;
        checkbox.addEventListener('change', (e) => {
            const checked = e.target.checked;
            checkboxMap[path] = checked;
            updateChildren(wrapper, checked);
        });

        checkboxMap[path] = true;

        summary.appendChild(checkbox);
        summary.append(` ${key}`);
        wrapper.appendChild(summary);

        if (typeof value === 'object' && value !== null) {
            if (Array.isArray(value)) {
                value.forEach((item, index) => {
                    const child = createAccordion(`[${index}]`, item, `${path}[${index}]`);
                    wrapper.appendChild(child);
                });
            } else {
                Object.entries(value).forEach(([childKey, childVal]) => {
                    const child = createAccordion(childKey, childVal, `${path}.${childKey}`);
                    wrapper.appendChild(child);
                });
            }
        } else {
            const leaf = document.createElement('div');
            leaf.style.marginLeft = '20px';

            const leafCheckbox = document.createElement('input');
            leafCheckbox.type = 'checkbox';
            leafCheckbox.checked = true;
            leafCheckbox.dataset.path = path;
            leafCheckbox.addEventListener('change', (e) => {
                checkboxMap[path] = e.target.checked;
            });

            checkboxMap[path] = true;

            leaf.appendChild(leafCheckbox);
            leaf.append(` ${key}: ${value}`);
            wrapper.appendChild(leaf);
        }

        return wrapper;
    }

    function updateChildren(parent, isChecked) {
        const checkboxes = parent.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(cb => {
            cb.checked = isChecked;
            checkboxMap[cb.dataset.path] = isChecked;
        });
    }

    function submitFilteredJson() {
        const jsonText = document.getElementById('accordion-container').dataset.originalJson;
        if (!jsonText) {
            alert("Please load JSON first.");
            return;
        }

        const original = JSON.parse(jsonText);
        const filtered = filterJson(original, "");

        fetch('/your-submit-api-endpoint', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(filtered)
        }).then(r => console.log('Submit response:', r));
    }

    function filterJson(node, path) {
        if (!checkboxMap[path]) return null;

        if (Array.isArray(node)) {
            return node.map((item, i) => filterJson(item, `${path}[${i}]`));
        } else if (typeof node === 'object' && node !== null) {
            const result = {};
            for (const [k, v] of Object.entries(node)) {
                const childPath = path ? `${path}.${k}` : k;
                const filtered = filterJson(v, childPath);
                if (filtered !== null || v === null) {
                    result[k] = filtered ?? null;
                }
            }
            return result;
        } else {
            return node;
        }
    }
</script>
