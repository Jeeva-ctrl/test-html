@page "/json-accordion"
@using System.Text.Json.Nodes
@inject IJSRuntime JSRuntime

<h3>JSON Accordion</h3>

<!-- Accordion Tree -->
<div id="accordion-container">
    @RenderNode(JsonData, "")
</div>

<!-- Button to get selected JSON -->
<button @onclick="ExportSelectedJson">Get Selected JSON</button>

<h4>Selected JSON:</h4>
<pre id="json-output">Loading...</pre>

@code {
    [Parameter] public JsonNode JsonData { get; set; } = JsonNode.Parse("{ \"new\": { \"test\": \"test\" } }")!;

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("initializeCheckboxes", JsonData.ToString());
    }

    // Render the JSON structure
    private RenderFragment RenderNode(JsonNode? node, string path) => builder =>
    {
        int seq = 0;

        if (node is JsonObject obj)
        {
            builder.OpenElement(seq++, "details");
            builder.AddAttribute(seq++, "open", true);
            builder.AddAttribute(seq++, "data-path", path);

            builder.OpenElement(seq++, "summary");

            builder.OpenElement(seq++, "input");
            builder.AddAttribute(seq++, "type", "checkbox");
            builder.AddAttribute(seq++, "data-path", path);
            builder.AddAttribute(seq++, "checked", true);  // Initially checked
            builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => OnCheckboxChange(path, obj)));
            builder.CloseElement();

            builder.AddContent(seq++, string.IsNullOrEmpty(path) ? "Root" : path.Split('.').Last());
            builder.CloseElement();

            foreach (var prop in obj)
            {
                var childPath = string.IsNullOrEmpty(path) ? prop.Key : $"{path}.{prop.Key}";
                builder.AddContent(seq++, RenderNode(prop.Value, childPath));
            }

            builder.CloseElement();
        }
        else if (node is JsonArray arr)
        {
            builder.OpenElement(seq++, "details");
            builder.AddAttribute(seq++, "open", true);
            builder.AddAttribute(seq++, "data-path", path);

            builder.OpenElement(seq++, "summary");

            builder.OpenElement(seq++, "input");
            builder.AddAttribute(seq++, "type", "checkbox");
            builder.AddAttribute(seq++, "data-path", path);
            builder.AddAttribute(seq++, "checked", true);  // Initially checked
            builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => OnCheckboxChange(path, arr)));
            builder.CloseElement();

            builder.AddContent(seq++, path.Split('.').Last());
            builder.CloseElement();

            for (int i = 0; i < arr.Count; i++)
            {
                var childPath = $"{path}[{i}]";
                builder.AddContent(seq++, RenderNode(arr[i], childPath));
            }

            builder.CloseElement();
        }
        else
        {
            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "data-path", path);

            builder.OpenElement(seq++, "input");
            builder.AddAttribute(seq++, "type", "checkbox");
            builder.AddAttribute(seq++, "data-path", path);
            builder.AddAttribute(seq++, "checked", true);  // Initially checked
            builder.AddAttribute(seq++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => OnCheckboxChange(path, node)));
            builder.CloseElement();

            builder.AddContent(seq++, $" {path.Split('.').Last()}: {node?.ToString()} ");

            builder.CloseElement();
        }
    };

    // On checkbox change, call JavaScript to update the checkbox state
    private async Task OnCheckboxChange(string path, JsonNode node)
    {
        await JSRuntime.InvokeVoidAsync("updateCheckboxState", path, node.ToString());
    }

    // Export the selected JSON
    private async Task ExportSelectedJson()
    {
        var selectedJson = await JSRuntime.InvokeAsync<string>("getSelectedJson");
        var jsonNode = JsonNode.Parse(selectedJson);
        var formattedJson = jsonNode?.ToString(new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
        await JSRuntime.InvokeVoidAsync("setJsonOutput", formattedJson);
    }
}
