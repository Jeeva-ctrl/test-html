@inject IJSRuntime JS
@code {
    private string accordionId = $"accordion_{Guid.NewGuid()}";

    [Parameter]
    public JsonNode JsonData { get; set; } = JsonNode.Parse("{\"new\":{\"test\":\"test\"}}")!;

    private async Task RenderAccordionAsync()
    {
        await JS.InvokeVoidAsync("renderAccordion", accordionId, JsonData);
    }

    private async Task SubmitSelectedJsonAsync()
    {
        var selectedJson = await JS.InvokeAsync<string>("getSelectedJson", accordionId);
        Console.WriteLine($"Selected JSON: {selectedJson}");

        // üîÅ Replace this with your real API call
        await JS.InvokeVoidAsync("fetch", "/your-api-endpoint", new
        {
            method = "POST",
            headers = new { ["Content-Type"] = "application/json" },
            body = selectedJson
        });
    }
}

<div>
    <button @onclick="RenderAccordionAsync">Load Accordion</button>
    <div id="@accordionId"></div>
    <button @onclick="SubmitSelectedJsonAsync">Submit Selected JSON</button>
</div>

<script>
    const checkboxStates = {};

    function renderAccordion(containerId, jsonData) {
        const container = document.getElementById(containerId);
        container.innerHTML = "";
        checkboxStates[containerId] = {};
        const rootKeys = Object.keys(jsonData);
        rootKeys.forEach(key => {
            const el = renderNode(jsonData[key], key, `${key}`, containerId);
            container.appendChild(el);
        });
    }

    function renderNode(node, label, path, containerId) {
        const wrapper = document.createElement('div');
        wrapper.style.marginLeft = '20px';

        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.checked = true;
        checkbox.dataset.path = path;
        checkbox.dataset.container = containerId;
        checkboxStates[containerId][path] = true;

        checkbox.onchange = () => {
            checkboxStates[containerId][path] = checkbox.checked;
            updateChildren(wrapper, checkbox.checked, containerId);
        };

        const lbl = document.createElement('label');
        lbl.textContent = ` ${label}`;
        lbl.style.marginLeft = '5px';

        const line = document.createElement('div');
        line.appendChild(checkbox);
        line.appendChild(lbl);
        wrapper.appendChild(line);

        if (typeof node === 'object' && node !== null) {
            if (Array.isArray(node)) {
                node.forEach((child, index) => {
                    const childPath = `${path}[${index}]`;
                    wrapper.appendChild(renderNode(child, `[${index}]`, childPath, containerId));
                });
            } else {
                Object.entries(node).forEach(([key, value]) => {
                    const childPath = `${path}.${key}`;
                    wrapper.appendChild(renderNode(value, key, childPath, containerId));
                });
            }
        } else {
            const val = document.createElement('span');
            val.textContent = `: ${node}`;
            line.appendChild(val);
        }

        return wrapper;
    }

    function updateChildren(wrapper, isChecked, containerId) {
        const inputs = wrapper.querySelectorAll('input[type="checkbox"]');
        inputs.forEach(input => {
            input.checked = isChecked;
            checkboxStates[containerId][input.dataset.path] = isChecked;
        });
    }

    function getSelectedJson(containerId) {
        const jsonData = window.originalJsonData;
        return JSON.stringify(filterJson(jsonData, "", containerId), null, 2);
    }

    function filterJson(node, path, containerId) {
        const isChecked = checkboxStates[containerId][path] ?? true;
        if (!isChecked) return null;

        if (typeof node !== 'object' || node === null) return node;

        if (Array.isArray(node)) {
            const result = node.map((item, i) => filterJson(item, `${path}[${i}]`, containerId)).filter(i => i !== null);
            return result.length > 0 ? result : null;
        } else {
            const result = {};
            for (const [key, value] of Object.entries(node)) {
                const childPath = path ? `${path}.${key}` : key;
                const filtered = filterJson(value, childPath, containerId);
                if (filtered !== null || value === null) {
                    result[key] = filtered;
                }
            }
            return Object.keys(result).length > 0 ? result : null;
        }
    }
</script>
