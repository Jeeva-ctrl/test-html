function toggleChildren(parent, isChecked) {
    const childCheckboxes = parent.querySelectorAll('details > summary + * input[type="checkbox"]');
    childCheckboxes.forEach(cb => {
        cb.checked = isChecked;
        const path = cb.dataset.path;
        if (path) {
            checkboxMap[path] = isChecked;
        }
    });
}
<script>
    let checkboxState = {};

    function renderAccordion(jsonText) {
        const data = JSON.parse(jsonText);
        checkboxState = {};
        const container = document.getElementById('accordion-container');
        container.innerHTML = '';
        const accordion = buildNode(data, '', true);
        container.appendChild(accordion);
    }

    function buildNode(node, path, isRoot = false) {
        const wrapper = document.createElement('div');

        if (typeof node === 'object' && node !== null) {
            const isArray = Array.isArray(node);
            const container = document.createElement('details');
            if (isRoot) container.setAttribute('open', '');

            const summary = document.createElement('summary');

            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.checked = true;
            checkbox.addEventListener('change', function () {
                checkboxState[path] = this.checked;
                toggleChildren(wrapper, this.checked);
            });

            checkboxState[path] = true;

            summary.appendChild(checkbox);
            summary.append(` ${path.split('.').pop() || 'Root'}`);
            container.appendChild(summary);

            const childWrapper = document.createElement('div');
            const keys = isArray ? node.map((_, i) => i) : Object.keys(node);

            for (const key of keys) {
                const childPath = isArray ? `${path}[${key}]` : (path ? `${path}.${key}` : key);
                const child = buildNode(node[key], childPath);
                childWrapper.appendChild(child);
            }

            container.appendChild(childWrapper);
            wrapper.appendChild(container);
        } else {
            const line = document.createElement('div');
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.checked = true;
            checkbox.addEventListener('change', function () {
                checkboxState[path] = this.checked;
            });

            checkboxState[path] = true;
            line.appendChild(checkbox);
            line.append(` ${path.split('.').pop()}: ${node}`);
            wrapper.appendChild(line);
        }

        return wrapper;
    }

    function toggleChildren(parent, isChecked) {
        const inputs = parent.querySelectorAll('input[type="checkbox"]');
        for (const checkbox of inputs) {
            checkbox.checked = isChecked;
            const evt = new Event('change');
            checkbox.dispatchEvent(evt);
        }
    }

    function getSelectedJson() {
        const filterNode = (node, path) => {
            if (typeof node !== 'object' || node === null) {
                return checkboxState[path] ? node : undefined;
            }

            const isArray = Array.isArray(node);
            const result = isArray ? [] : {};

            const keys = isArray ? node.map((_, i) => i) : Object.keys(node);
            for (const key of keys) {
                const childPath = isArray ? `${path}[${key}]` : (path ? `${path}.${key}` : key);
                const filtered = filterNode(node[key], childPath);
                if (filtered !== undefined || node[key] === null) {
                    if (isArray) {
                        result.push(filtered ?? null);
                    } else {
                        result[key] = filtered ?? null;
                    }
                }
            }

            return Object.keys(result).length > 0 || isArray && result.length > 0
                ? result
                : (checkboxState[path] ? (isArray ? [] : {}) : undefined);
        };

        const original = JSON.parse(document.getElementById('accordion-container').dataset.originalJson);
        const filtered = filterNode(original, '');
        return JSON.stringify(filtered, null, 2);
    }
</script>
@page "/json-accordion"
@inject IJSRuntime JS

<h3>JSON Accordion with Checkboxes</h3>

<button @onclick="LoadJson">Load JSON</button>
<div id="accordion-container"></div>

<button @onclick="SubmitSelectedJson">Submit Selected JSON</button>

@code {
    private async Task LoadJson()
    {
        var json = """
        {
            "person": {
                "name": "Alice",
                "age": 30,
                "address": {
                    "city": "Wonderland",
                    "zip": null
                },
                "hobbies": ["reading", "chess"]
            },
            "active": true
        }
        """;

        await JS.InvokeVoidAsync("renderAccordion", json);
    }

    private async Task SubmitSelectedJson()
    {
        var selectedJson = await JS.InvokeAsync<string>("getSelectedJson");
        // Call your API with selectedJson
        Console.WriteLine("Selected JSON: " + selectedJson);

        // Example: await Http.PostAsJsonAsync("your-api-endpoint", JsonSerializer.Deserialize<JsonElement>(selectedJson));
    }
}
